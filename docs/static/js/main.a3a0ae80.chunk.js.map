{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategorias","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cat","type","value","onChange","target","GifGridItem","id","title","url","className","src","alt","getGifs","categoria","a","encodeURI","fetch","respuesta","json","data","gifs","map","img","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","useFetchGifs","key","GifExpertApp","categorias","ReactDOM","render","document","getElementById"],"mappings":"6MAmCeA,EAjCY,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAERC,mBAAS,IAFD,mBAErCC,EAFqC,KAEzBC,EAFyB,KAkB5C,OACI,0BAAMC,SAZW,SAACC,GAClBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAO,IACxBR,GAAc,SAAAS,GAAG,OAAGP,GAAH,mBAAiBO,OAClCN,EAAc,OAQd,2BACIO,KAAK,OACLC,MAAOT,EACPU,SApBQ,SAACP,GACjBF,EAAcE,EAAEQ,OAAOF,YCJlBG,EAAc,SAAC,GAAmB,EAAlBC,GAAmB,IAAhBC,EAAe,EAAfA,MAAMC,EAAS,EAATA,IAElC,OACI,oCACI,yBAAKC,UAAU,0CACZ,yBAAKC,IAAKF,EAAKG,IAAI,KACnB,2BAAIJ,M,uBCRNK,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,4DACF,mCACPN,EAFS,gDAEoCO,UAAUF,GAF9C,6BACF,oCADE,SAGOG,MAAMR,GAHb,cAGTS,EAHS,gBAIIA,EAAUC,OAJd,uBAIRC,EAJQ,EAIRA,KAIDC,EAAKD,EAAKE,KAAI,SAAAC,GAAM,IAAD,EACrB,MAAM,CACFhB,GAAIgB,EAAIhB,GACRC,MAAOe,EAAIf,MACXC,IAAG,UAAEc,EAAIC,cAAN,aAAE,EAAYC,iBAAiBhB,QAZ3B,kBAeTY,GAfS,4CAAH,sDCGPK,EAAU,SAAC,GAAiB,IAAhBZ,EAAe,EAAfA,UAAe,ECAZ,SAACA,GAAe,IAAD,EACbrB,mBAAS,CAC/B2B,KAAK,GACLO,SAAQ,IAH2B,mBAChCC,EADgC,KACzBC,EADyB,KAkBvC,OAXAC,qBAAU,WACNjB,EAAQC,GACPiB,MAAK,SAAAR,GAAG,OACLM,EAAS,CACLT,KAAKG,EACLI,SAAQ,SAIlB,CAACb,IAEIc,EDfqBI,CAAalB,GAA7BU,EAHwB,EAG7BJ,KAAYO,EAHiB,EAGjBA,QAEnB,OACI,oCACI,wBAAIjB,UAAU,qCAAqCI,GAClDa,EAAQ,uBAAGjB,UAAU,qCAAb,eACT,yBAAKA,UAAU,aAERc,EAAOF,KAAI,SAAAC,GAAG,OACb,kBAAC,EAAD,eACAU,IAAKV,EAAIhB,IACLgB,UEaTW,EA1BM,WACjB,IADuB,EAEazC,mBADZ,CAAC,cADF,mBAEhB0C,EAFgB,KAEJ3C,EAFI,KAGvB,OACA,oCACI,4CAIA,kBAAC,EAAD,CACIA,cAAeA,IAGnB,6BAEK2C,EAAWb,KAAI,SAACrB,GAAD,OACZ,kBAAC,EAAD,CACIgC,IAAKhC,EACLa,UAAWb,SCf/BmC,IAASC,OAAO,kBAAC,EAAD,MACdC,SAASC,eAAe,U","file":"static/js/main.a3a0ae80.chunk.js","sourcesContent":["import React,{useState} from 'react'\r\nimport PropTypes from 'prop-types';\r\nexport const AddCategory = ({setCategorias}) => {\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n    const  handleInput= (e) => {\r\n        setInputValue(e.target.value);\r\n    }\r\n    \r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        //uso callback , cat es el estado anterior\r\n        if(inputValue.trim().length>2){\r\n            setCategorias(cat=>[inputValue,...cat]);\r\n            setInputValue('');\r\n\r\n        }\r\n        //console.log('enviado')\r\n    }\r\n     \r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input\r\n                type='text'\r\n                value={inputValue}\r\n                onChange={handleInput}\r\n                \r\n             />\r\n        </form>\r\n    )\r\n}\r\nAddCategory.propTypes={\r\n    setCategorias: PropTypes.func.isRequired\r\n}\r\n\r\nexport default AddCategory;","import React from 'react'\r\n\r\nexport const GifGridItem = ({id,title,url}) => {\r\n    //recibe los datos del gif y lo imprime\r\n    return (\r\n        <>\r\n            <div className=\"card animate__animated animate__bounce\">\r\n               <img src={url} alt='' />\r\n               <p>{title}</p>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","export const getGifs = async(categoria) => {    \r\n        const apiKey='B0qECaENyRaEoN9VYIv4KHWOovaNfwVT';\r\n        const url=`http://api.giphy.com/v1/gifs/search?q=${encodeURI(categoria)}&limit=10&api_key=${apiKey}`;\r\n        const respuesta=await fetch(url);\r\n        const {data}=await respuesta.json();\r\n        //console.log(categoria);\r\n       // console.log(data);\r\n \r\n        const gifs=data.map(img=>{\r\n            return{\r\n                id: img.id,\r\n                title: img.title,\r\n                url: img.images?.downsized_medium.url\r\n            }\r\n        });\r\n       return gifs;\r\n   \r\n    \r\n}\r\n\r\n","import React from 'react';\r\nimport { GifGridItem } from './GifGridItem';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nexport const GifGrid = ({categoria}) => {\r\n\r\n    //recibe los datos de la api \r\n    const {data:images,loading}=useFetchGifs(categoria);\r\n    \r\n    return (\r\n        <>\r\n            <h3 className=\"animate__animated animate__bounce\">{categoria}</h3>\r\n            {loading?<p className=\"animate__animated animate__shakeX\">Cargando...</p>:\r\n            <div className=\"card-grid\">\r\n                {/* Imprime cada gif de la categoría*/}\r\n                  {images.map(img=>\r\n                    <GifGridItem \r\n                    key={img.id} \r\n                    {...img}\r\n                    />\r\n                    )\r\n                    }    \r\n                </div>}\r\n            \r\n        </>\r\n    )\r\n}\r\n\r\n","import {useState,useEffect} from 'react';\r\nimport { getGifs } from '../helpers/getGifs';\r\n//hooks son funciones. se nombran con use\r\nexport const useFetchGifs = (categoria) => {\r\n    const [state, setState] = useState({\r\n        data:[],\r\n        loading:true\r\n    });\r\n //useEffect me sirve para no volver a hacer la petición cada vez que hago un cambio\r\n    //en un componente, ejecuta código según cierta condición\r\n    useEffect(()=>{\r\n        getGifs(categoria)\r\n        .then(img=>\r\n            setState({\r\n                data:img,\r\n                loading:false\r\n            })\r\n            );\r\n\r\n    },[categoria]);\r\n\r\n    return state; //data:[],loading:true\r\n}\r\n","import React,{useState} from 'react';\r\nimport AddCategory from './components/AddCategory'\r\nimport { GifGrid } from './components/GifGrid';\r\n//rafc\r\nconst GifExpertApp = () => {\r\n    const categoriasInicial=['One Punch'];\r\n    const [categorias, setCategorias] = useState(categoriasInicial);\r\n    return (\r\n    <>\r\n        <h2>GifExpertApp</h2>\r\n        {/*Agrega categorias al array categorias\r\n         contiene el input text\r\n        */}\r\n        <AddCategory \r\n            setCategorias={setCategorias}\r\n            />\r\n\r\n        <hr />\r\n        {/* Imprime el contenedor de gifs de cada categoría*/}\r\n            {categorias.map((cat)=>\r\n                <GifGrid \r\n                    key={cat}\r\n                    categoria={cat}\r\n                />    \r\n            )\r\n            }\r\n    </>\r\n    );\r\n}\r\n \r\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExpertApp from './GifExpertApp';\n\n//import App from './App';\n\nReactDOM.render(<GifExpertApp />  ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n//serviceWorker.unregister();\n"],"sourceRoot":""}